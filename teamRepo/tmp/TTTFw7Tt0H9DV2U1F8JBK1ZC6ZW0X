X-Powered-By: PHP/8.0.2
Expires: Thu, 19 Nov 1981 08:52:00 GMT
Cache-Control: no-store, no-cache, must-revalidate
Pragma: no-cache
Content-type: text/html; charset=UTF-8


<!DOCTYPE html>
<html>
<head>
    <title>Snake Game</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
        }

        #game-board {
            width: 300px;
            height: 300px;
            border: 1px solid #000;
            position: relative;
            margin: 20px auto;
        }

        .snake-segment {
            width: 20px;
            height: 20px;
            background-color: green;
            position: absolute;
        }

        .food {
            width: 20px;
            height: 20px;
            background-color: red;
            position: absolute;
        }
    </style>
</head>
<body>
    <h1>Snake Game</h1>
    <div id="game-board"></div>

    <script>
        const gameBoard = document.getElementById("game-board");
        const gridSize = 15;
        const snake = [{ x: 5, y: 5 }];
        const food = { x: 10, y: 10 };
        let direction = "right";

        function updateGame() {
            // Update the snake's position based on the current direction
            moveSnake();

            // Check for collisions with the food
            if (snake[0].x === food.x && snake[0].y === food.y) {
                // Increase the snake's length and randomly place the food
                snake.push({ x: 0, y: 0 });
                randomizeFoodPosition();
            }

            // Check for collisions with the walls or itself
            if (isCollision()) {
                clearInterval(gameInterval);
                alert("Game over!");
            }

            // Redraw the game board
            renderGame();
        }

        function moveSnake() {
            const head = { ...snake[0] };
            switch (direction) {
                case "up":
                    head.y -= 1;
                    break;
                case "down":
                    head.y += 1;
                    break;
                case "left":
                    head.x -= 1;
                    break;
                case "right":
                    head.x += 1;
                    break;
            }

            snake.unshift(head);
            if (snake.length > 1) {
                snake.pop();
            }
        }

        function randomizeFoodPosition() {
            food.x = Math.floor(Math.random() * gridSize);
            food.y = Math.floor(Math.random() * gridSize);
        }

        function isCollision() {
            const head = snake[0];
            // Check for collisions with walls
            if (head.x < 0 || head.x >= gridSize || head.y < 0 || head.y >= gridSize) {
                return true;
            }

            // Check for collisions with itself
            for (let i = 1; i < snake.length; i++) {
                if (head.x === snake[i].x && head.y === snake[i].y) {
                    return true;
                }
            }

            return false;
        }

        function renderGame() {
            gameBoard.innerHTML = "";

            // Render the snake
            snake.forEach((segment, index) => {
                const snakeSegment = document.createElement("div");
                snakeSegment.className = "snake-segment";
                snakeSegment.style.left = segment.x * 20 + "px";
                snakeSegment.style.top = segment.y * 20 + "px";
                gameBoard.appendChild(snakeSegment);
            });

            // Render the food
            const foodElement = document.createElement("div");
            foodElement.className = "food";
            foodElement.style.left = food.x * 20 + "px";
            foodElement.style.top = food.y * 20 + "px";
            gameBoard.appendChild(foodElement);
        }

        document.addEventListener("keydown", (event) => {
            switch (event.key) {
                case "ArrowUp":
                    if (direction !== "down") direction = "up";
                    break;
                case "ArrowDown":
                    if (direction !== "up") direction = "down";
                    break;
                case "ArrowLeft":
                    if (direction !== "right") direction = "left";
                    break;
                case "ArrowRight":
                    if (direction !== "left") direction = "right";
                    break;
            }
        });

        randomizeFoodPosition();
        const gameInterval = setInterval(updateGame, 150);
    </script>
</body>
</html>



